<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDECodeSnippetCompletionPrefix</key>
	<string></string>
	<key>IDECodeSnippetCompletionScopes</key>
	<array>
		<string>All</string>
	</array>
	<key>IDECodeSnippetContents</key>
	<string>//
//  SmallTileLeftCTARightImageCell.swift
//  StaplesConnectApp
//
//  Created by Leandro Ramirez on 5/2/22.
//

import UIKit
import Anchorage

class SmallTileLeftCTARightImageCell: UICollectionViewCell {
    static let reuseID = "SmallTileLeftCTARightImageCell"

    struct Layout {
        static let leadingInsets = CGFloat(16)
        static let verticalInsets = CGFloat(14)
        static let horizontalInsets = CGFloat(16)
        static let height = CGFloat(132)
        static let exploreButtonTopInsets = CGFloat(8)
        static let buttonMinHeight = CGFloat(19)
    }

    private let headingLabel: UILabel = {
        let label = UILabel()
        label.numberOfLines = 0
        label.textAlignment = .left
        label.bonMotStyle = NewFonts.H5.H5Bold
        label.styledText = L10n.Stores.Deals.LocalStore.title.uppercased()
        label.isUserInteractionEnabled = false
        return label
    }()

    private let descriptionLabel: UILabel = {
        let label = UILabel()
        label.numberOfLines = 0
        label.textAlignment = .left
        label.lineBreakMode = .byWordWrapping
        label.bonMotStyle = NewFonts.Body.BodyRegularSize14
        label.styledText = L10n.Stores.Deals.LocalStore.description
        label.isUserInteractionEnabled = false
        return label
    }()

    private let backgroundImage: UIImageView = {
        let imageView = UIImageView()
        imageView.image = Asset.Images.weeklyadStore.image
        imageView.contentMode = .scaleAspectFill
        imageView.clipsToBounds = true
        return imageView
    }()

    private lazy var exploreButton: UIButton = {
        let button = UIButton()
        button.accessibilityIdentifier = AccessibiltyIds.button.createAccessibilityString(descriptor: "explore")
        button.bonMotStyle = NewFonts.CTA.CTANotVisited
        button.styledText = L10n.Stores.Deals.viewStore
        button.titleLabel?.numberOfLines = 0
        button.addTarget(self, action: #selector(viewStoreTapped), for: .touchUpInside)
        return button
    }()

    private lazy var topStackView: UIStackView = {
        let view = UIStackView.init(axis: .vertical, arrangedSubviews: [headingLabel, descriptionLabel])
        view.spacing = 8
        view.alignment = .leading
        view.distribution = .fillProportionally
        view.isUserInteractionEnabled = false
        return view
    }()

    func configure(with model: StoreDealsViewModel) {
        DispatchQueue.main.async {
            self.headingLabel.styledText = model.heading.uppercased()
            self.headingLabel.bonMotStyle = model.headingStyle ?? NewFonts.H5.H5Bold
            self.descriptionLabel.attributedText = model.description
            self.exploreButton.styledText = model.ctaText
            self.exploreButton.bonMotStyle = model.ctaStyle ?? NewFonts.CTA.CTANotVisited
            self.ctaAction = model.cta
            self.backgroundImage.backgroundColor = .clear
            if let imageUrl = model.imageUrl {
                self.backgroundImage.sd_setImage(with: URL(string: imageUrl), placeholderImage: model.imagePlaceholder.image, options: [], context: nil)
            } else {
                self.backgroundImage.image = model.imagePlaceholder.image
                self.backgroundImage.backgroundColor = Color.brandRed
            }
        }
    }

    var ctaAction: VoidClosure?

    @objc func viewStoreTapped() {
        if let ctaAction = ctaAction {
            ctaAction()
        }
    }

    override init(frame: CGRect) {
        super.init(frame: frame)
        configureViews()
    }

    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }

    func configureViews() {
        addCustomShadow(view: contentView)
        defaultLayout()
        addSubview(topStackView)
        addSubview(exploreButton)
        addSubview(backgroundImage)
        configureLayout()
    }

    func configureLayout() {
        topStackView.topAnchor == self.topAnchor + Layout.verticalInsets
        topStackView.leadingAnchor == self.leadingAnchor + Layout.leadingInsets

        exploreButton.topAnchor == topStackView.bottomAnchor + Layout.exploreButtonTopInsets
        exploreButton.leadingAnchor == topStackView.leadingAnchor
        exploreButton.bottomAnchor == bottomAnchor - Layout.verticalInsets
        exploreButton.heightAnchor &gt;= Layout.buttonMinHeight

        backgroundImage.widthAnchor == Layout.height
        backgroundImage.trailingAnchor == self.trailingAnchor
        backgroundImage.verticalAnchors == self.verticalAnchors

        topStackView.trailingAnchor == backgroundImage.leadingAnchor - Layout.horizontalInsets

    }
}
</string>
	<key>IDECodeSnippetIdentifier</key>
	<string>685DBEE3-714D-4C76-B231-C6CDFBDE3DD6</string>
	<key>IDECodeSnippetLanguage</key>
	<string>Xcode.SourceCodeLanguage.Swift</string>
	<key>IDECodeSnippetSummary</key>
	<string></string>
	<key>IDECodeSnippetTitle</key>
	<string>LeftTileCTARightImageCollectionCell</string>
	<key>IDECodeSnippetUserSnippet</key>
	<true/>
	<key>IDECodeSnippetVersion</key>
	<integer>0</integer>
</dict>
</plist>
