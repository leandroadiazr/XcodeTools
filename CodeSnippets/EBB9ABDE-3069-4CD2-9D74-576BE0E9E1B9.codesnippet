<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDECodeSnippetCompletionPrefix</key>
	<string>UIViewExtension</string>
	<key>IDECodeSnippetCompletionScopes</key>
	<array>
		<string>All</string>
	</array>
	<key>IDECodeSnippetContents</key>
	<string>extension UIView {

    ///CONFIGURE BACKGROUND COLOR EXPECT 3 PARAMETERS
    func configureBubbleBackgroundColor(with user: String, name: String, for label: UILabel) -&gt; UIColor {
         switch user {
         case "Administrator" :
             label.textColor = .black
             label.setRegualAndBoldText(regularString: "Shared by your teacher ", boldString: name, fontSize: 12)
            label.adjustsFontSizeToFitWidth = true
             return Color.brandYellow
         case "Educator" :
             label.textColor = .black
             label.setRegualAndBoldText(regularString: "Shared by your teacher ", boldString: name, fontSize: 12)
            label.adjustsFontSizeToFitWidth = true
             return Color.brandYellow
         case "Supporter":
            label.textColor = .white
             label.setRegualAndBoldText(regularString: "Shared by ", boldString: name, fontSize: 12)
            label.adjustsFontSizeToFitWidth = true
             return  Color.brandCyan
         default:
             return .white
         }
     }


    func addTopBorder(with color: UIColor?, andHeight borderHeight: CGFloat) {
        let border = UIView()
        border.backgroundColor = color
        border.autoresizingMask = [.flexibleWidth, .flexibleBottomMargin]
        border.frame = CGRect(x: 0, y: 0, width: self.frame.size.width, height: borderHeight)
        self.addSubview(border)
    }
    
    func addCustomShadow(view: UIView) {
        layer.shadowColor = UIColor.black.cgColor
        layer.shadowOpacity = 0.4
        layer.shadowOffset = CGSize(width: 3, height: 3)
        layer.shadowRadius = 1
        layer.shouldRasterize = false
    }
    
    func getFormattedDate(string: String?) -&gt; String {
        let dateFormatterGet = DateFormatter()
        dateFormatterGet.dateFormat = "yyyy-MM-dd'T'HH:mm:ssZ"

        let dateFormatterPrint = DateFormatter()
        dateFormatterPrint.dateFormat = "MMM dd, yyyy"

        let date: Date? = dateFormatterGet.date(from: string ?? "2019-04-10T15:26:58+0000")
        print("Date",dateFormatterPrint.string(from: date!)) // Feb 01,2018
        return dateFormatterPrint.string(from: date!)
    }
}</string>
	<key>IDECodeSnippetIdentifier</key>
	<string>EBB9ABDE-3069-4CD2-9D74-576BE0E9E1B9</string>
	<key>IDECodeSnippetLanguage</key>
	<string>Xcode.SourceCodeLanguage.Swift</string>
	<key>IDECodeSnippetSummary</key>
	<string></string>
	<key>IDECodeSnippetTitle</key>
	<string>UIViewExtension</string>
	<key>IDECodeSnippetUserSnippet</key>
	<true/>
	<key>IDECodeSnippetVersion</key>
	<integer>0</integer>
</dict>
</plist>
