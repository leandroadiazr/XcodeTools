<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDECodeSnippetCompletionPrefix</key>
	<string></string>
	<key>IDECodeSnippetCompletionScopes</key>
	<array>
		<string>All</string>
	</array>
	<key>IDECodeSnippetContents</key>
	<string>//
//  BigTileTopImageBottomCTACell.swift
//  StaplesConnectApp
//
//  Created by Leandro Ramirez on 4/30/22.
//

import UIKit
import Anchorage
import Services
import SDWebImage

class BigTileTopImageBottomCTACell: UICollectionViewCell {
    static let reuseID = "BigTileTopImageBottomCTACell"
    private let placeHolderImage = Asset.Images.listsHomeScreen.image
    struct Layout {
        static let imageViewHeight = CGFloat(150)
        static let contentWidth = CGFloat(255)
        static let ctaButtonHeight = CGFloat(16)
        static let edgeInsets = CGFloat(15)
        static let minimunEdgeInsets = CGFloat(10)
        static let cornerRadius = CGFloat(4)
        static let bottomInsets = CGFloat(16)
        static let logoHeight = CGFloat(20)
        static let logoWidth = CGFloat(100)
    }

    let imageView: UIImageView = {
        let view = UIImageView()
        view.heightAnchor == Layout.imageViewHeight
        view.contentMode = .scaleAspectFill
        view.layer.masksToBounds = true
        view.clipsToBounds = true
        view.translatesAutoresizingMaskIntoConstraints = false
        return view
    }()

    private let brandlogoImageView: UIImageView = {
        let imageView = UIImageView()
        imageView.image = Asset.Images.staplesLogoHorizontal.image
        imageView.widthAnchor == Layout.logoWidth
        imageView.translatesAutoresizingMaskIntoConstraints = false
        imageView.contentMode = .scaleAspectFit
        return imageView
    }()

    private let headerLabel: UILabel = {
        let label = UILabel()
        label.translatesAutoresizingMaskIntoConstraints = false
        label.bonMotStyle = NewFonts.H3.H3Bold
        label.lineBreakMode = .byWordWrapping
        label.numberOfLines = 2
        return label
    }()

    private let subHeaderLabel: UILabel = {
        let label = UILabel()
        label.translatesAutoresizingMaskIntoConstraints = false
        label.bonMotStyle = NewFonts.Body.BodyRegularSize14
        label.numberOfLines = 4
        label.lineBreakMode = .byTruncatingTail
        return label
    }()

    private let actionLabel: UILabel = {
        let label = UILabel()
        label.translatesAutoresizingMaskIntoConstraints = false
        label.bonMotStyle = NewFonts.CTA.CTANotVisited
        label.numberOfLines = 1
        return label
    }()

    var image: UIImageView? {
        didSet {
            imageView.image = image?.image
            setNeedsDisplay()
        }
    }

    var headerText: String? {
        didSet {
            headerLabel.styledText = headerText
        }
    }

    var subHeaderText: String? {
        didSet {
            subHeaderLabel.styledText = subHeaderText
        }
    }

    var goToDetailsAction: VoidClosure?

    private var logoImageHeightConstraint: NSLayoutConstraint?

    @objc func viewTapped(tapGestureRecognizer: UITapGestureRecognizer) {
        goToDetailsAction?()
    }

    override init(frame: CGRect) {
        super.init(frame: frame)
        configureViews()
    }

    public required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }

    func configureCellWithPersonalLists(list: ListEntity) {
        self.toggleBrandImage(show: false)
        logoImageHeightConstraint?.constant = 0
        let imageUrl = URL(string: list.imgUrl ?? "")
        imageView.sd_setImage(with: imageUrl, placeholderImage: placeHolderImage, options: .forceTransition, context: nil)
        headerText = list.name
        subHeaderText = list.description
        actionLabel.styledText = AppConstants.viewList
    }

    func configureCellWithFeaturedList(list: FeaturedList) {
        self.toggleBrandImage(show: true)
        logoImageHeightConstraint?.constant = 15
        let imageUrl = URL(string: list.imageURL)
        imageView.sd_setImage(with: imageUrl, placeholderImage: placeHolderImage, options: .forceTransition, context: nil)
        headerText = list.productListName
        subHeaderText = list.productListDescription
        actionLabel.styledText = AppConstants.viewList
    }

    func configureMarketing(with item: MarketingViewModel) {
        self.toggleBrandImage(show: false)
        imageView.image = item.image
        imageView.contentMode = .scaleAspectFill
        subHeaderText = item.subHeaderText
        actionLabel.styledText = item.ctaText
        headerText = nil
    }

    func configurePromotion(with item: PromotionViewModel) {
        self.toggleBrandImage(show: false)
        imageView.image = item.image
        imageView.contentMode = .scaleAspectFill
        subHeaderText = item.subHeaderText
        actionLabel.styledText = item.ctaText
        headerText = nil
    }

    func configureViews() {
        let tapGestureRecognizer = UITapGestureRecognizer(target: self, action: #selector(viewTapped(tapGestureRecognizer:)))
        self.isUserInteractionEnabled = true
        self.addGestureRecognizer(tapGestureRecognizer)
        contentView.addSubview(brandlogoImageView)
        contentView.addSubview(headerLabel)
        contentView.addSubview(subHeaderLabel)
        contentView.addSubview(actionLabel)
        contentView.addSubview(imageView)
        actionLabel.setContentCompressionResistancePriority(.defaultHigh, for: .vertical)
        subHeaderLabel.setContentCompressionResistancePriority(.defaultLow, for: .vertical)
        defaultLayout()
        setupConstraints()
    }

    private func toggleBrandImage(show: Bool) {
        DispatchQueue.main.async {
            if show {
                self.brandlogoImageView.isHidden = false
                self.logoImageHeightConstraint?.constant = Layout.logoHeight
            } else {
                self.brandlogoImageView.isHidden = true
                self.logoImageHeightConstraint?.constant = 0
            }
        }
    }

    private func setupConstraints() {
        imageView.topAnchor == topAnchor
        imageView.horizontalAnchors == horizontalAnchors

        brandlogoImageView.topAnchor == imageView.bottomAnchor + Layout.minimunEdgeInsets
        brandlogoImageView.leadingAnchor == leadingAnchor + Layout.edgeInsets
        logoImageHeightConstraint = brandlogoImageView.heightAnchor == Layout.logoHeight

        headerLabel.topAnchor == brandlogoImageView.bottomAnchor
        headerLabel.horizontalAnchors == horizontalAnchors + Layout.edgeInsets

        subHeaderLabel.topAnchor == headerLabel.bottomAnchor + 2
        subHeaderLabel.horizontalAnchors == horizontalAnchors + Layout.edgeInsets
        subHeaderLabel.bottomAnchor &lt;= actionLabel.topAnchor

        actionLabel.horizontalAnchors == horizontalAnchors + Layout.edgeInsets
        actionLabel.bottomAnchor == bottomAnchor - Layout.minimunEdgeInsets
    }
}
</string>
	<key>IDECodeSnippetIdentifier</key>
	<string>4E0935FB-EBC0-4797-9253-2FE287EADA42</string>
	<key>IDECodeSnippetLanguage</key>
	<string>Xcode.SourceCodeLanguage.Swift</string>
	<key>IDECodeSnippetSummary</key>
	<string></string>
	<key>IDECodeSnippetTitle</key>
	<string>BigTopImageBottonCTACollectionCell</string>
	<key>IDECodeSnippetUserSnippet</key>
	<true/>
	<key>IDECodeSnippetVersion</key>
	<integer>0</integer>
</dict>
</plist>
